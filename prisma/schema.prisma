// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

model User {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  workouts Workout[]

  @@map("users")
}

model Workout {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  user      User       @relation(fields: [userId], references: [id])
  exercises Exercise[]

  @@map("workouts")
}

model Exercise {
  id          String @id @default(uuid()) @db.Uuid
  workoutId   String @map("workout_id") @db.Uuid
  muscleGroup String @map("muscle_group")
  name        String
  reps        String
  sets        String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  workout        Workout          @relation(fields: [workoutId], references: [id])
  personalRecords PersonalRecord[]

  @@map("exercises")
}

model PersonalRecord {
  id         String @id @default(uuid()) @db.Uuid
  exerciseId String @map("exercise_id") @db.Uuid
  weight     String
  unit       String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  exercise Exercise @relation(fields: [exerciseId], references: [id])

  @@map("personal_records")
}
